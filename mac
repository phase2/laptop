#!/usr/bin/env bash

function need_sudo {
  osascript -e 'tell app "System Events" to activate'
  osascript -e 'tell app "System Events" to display dialog "Your sudo password is (likely) needed in the Terminal or will be very shortly." buttons {"OK"}'
  osascript -e 'tell app "Terminal" to activate'
}

[[ `diskutil coreStorage list` == 'No CoreStorage logical volume groups found' ]] && {
  osascript -e 'tell app "System Events" to activate'
  osascript -e 'tell app "System Events" to display dialog "Please enable FileVault and restart, then start this process again." buttons {"OK"} default button 1'
  open /System/Library/PreferencePanes/Security.prefPane
  exit 1
}

type -p gcc > /dev/null || {
  osascript -e 'tell app "System Events" to activate'
  osascript -e 'tell app "System Events" to display dialog "Please install XCode now.\n\n(The App Store has been opened for you.)\n\nIf you have installed XCode and still get this dialog, you will need to install the command-line tools by going to Preferences > Downloads in the XCode application." buttons {"Cancel", "OK"} default button 2'
  open /Applications/App\ Store.app
  echo "ERROR: Cannot find gcc. Try starting this process again."
  exit 1
}

echo "Installing Homebrew, a good OS X package manager."
  need_sudo
  ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
  brew update

echo "Installing GNU userland tools."
  brew install coreutils gnu-sed findutils

echo "Install GitHub-related tools."
  brew install git gist hub

echo "Installing a recent version of curl and wget for HTTP requests."
  brew install curl wget

echo "Installing MySQL, our standard database server."
  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/my.cnf > /tmp/my.cnf
  need_sudo
  sudo mv /tmp/my.cnf /etc/my.cnf
  brew install mysql
  unset TMPDIR
  mysql_install_db --verbose --user=`whoami` --basedir="$(brew --prefix mysql)" --datadir=/usr/local/var/mysql --tmpdir=/tmp
  mysql.server start

echo "Installing a test phpinfo.php in the new DocumentRoot."
  [[ -d $HOME/htdocs ]] || {
    mkdir $HOME/htdocs
    echo '<?php phpinfo();' > $HOME/htdocs/phpinfo.php
  }

echo "Installing Homebrew's PHP, MSSQL, MySQL and internationalization support."
  brew tap josegonzalez/php
  brew install php53 --with-mysql --with-intl
  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/httpd.conf | sed -e "s/@@USER@@/$USER/" > /tmp/httpd.conf
  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/httpd-extra-config.conf > /tmp/httpd-extra-config.conf
  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/httpd-vhosts.conf | sed -e "s/@@USER@@/$USER/" > /tmp/httpd-vhosts.conf
  need_sudo
  sudo mv /tmp/httpd.conf /etc/apache2/httpd.conf
  sudo mv /tmp/httpd-extra-config.conf /etc/apache2/extra/httpd-extra-config.conf
  sudo mv /tmp/httpd-vhosts.conf /etc/apache2/extra/httpd-vhosts.conf
  chmod -R ug+w /usr/local/Cellar/php/5.3.27/lib/php
  pear config-set php_ini /usr/local/etc/php.ini

echo "Installing PHP extensions and a default configuration."
  brew install php53-apc php53-memcached php53-imagick php53-pcntl php53-xdebug php53-xhprof php53-redis phpsh
  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/php.ini > /tmp/php.ini
  mv /tmp/php.ini /usr/local/etc/php.ini

  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/ext-imagick.ini > /tmp/ext-imagick.ini
  mv /tmp/ext-imagick.ini /usr/local/etc/php/5.3/conf.d
  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/ext-memcached.ini > /tmp/ext-memcached.ini
  mv /tmp/ext-memcached.ini /usr/local/etc/php/5.3/conf.d
  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/ext-pcntl.ini > /tmp/ext-pcntl.ini
  mv /tmp/ext-pcntl.ini /usr/local/etc/php/5.3/conf.d
  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/ext-redis.ini > /tmp/ext-redis.ini
  mv /tmp/ext-redis.ini /usr/local/etc/php/5.3/conf.d
  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/ext-xdebug.ini > /tmp/ext-xdebug.ini
  mv /tmp/ext-xdebug.ini /usr/local/etc/php/5.3/conf.d
  curl -fsSL https://raw.github.com/srjosh/laptop/master/conf_files/ext-xhprof.ini > /tmp/ext-xhprof.ini
  mv /tmp/ext-xhprof.ini /usr/local/etc/php/5.3/conf.d

open /System/Library/PreferencePanes/SharingPref.prefPane
osascript -e 'tell app "System Events" to activate'
osascript -e 'tell app "System Events" to display dialog "To prevent issues with Apache, please turn on Web Sharing now.\n\nClick \"OK\" once it has started to view the phpinfo() page." buttons {"Cancel", "OK"} default button 2'
open http://localhost/phpinfo.php

echo "Installing bash-completion and putting it into .bash_profile."
  brew install bash-completion

echo '
# Find homebrew prefix if it is available.
brew_prefix=$(brew --prefix)

# Enable bash_completion from brew.
if [ -f $brew_prefix/etc/bash_completion ]; then
  . $brew_prefix/etc/bash_completion
fi

# Put homebrew PHP ahead in $PATH a la http://justinhileman.info/article/reinstalling-php-53-on-mac-os-x/
export PATH=$brew_prefix/sbin:$brew_prefix/bin:$PATH

# If PEAR is installed, put its bin dir ahead of $PATH.
type -P pear > /dev/null && export PATH=$(pear config-get bin_dir):$PATH

# Always set up $HOME/bin in the front of $PATH.
export PATH=$HOME/bin:$PATH' > $HOME/.bashrc

echo '
if [ -f ~/.bashrc ]; then
   source ~/.bashrc
fi' > $HOME/.bash_profile

source ~/.bashrc

echo "Installing Drush, because we <3 Drupal and the shell."
  pear channel-discover pear.drush.org
  pear install drush/drush

echo "Upping max open files limit."
  [[ -f /etc/launchd.conf ]] || {
    need_sudo
    sudo sh -c 'echo "limit maxfiles 16384" > /etc/launchd.conf'
  }

echo "Installing lots of Drush coolness."
  [[ -d $HOME/.drush ]] || mkdir $HOME/.drush
  cd $HOME/.drush
  drush dl grn
  drush dl phpsh
  drush dl feather
  drush dl drush-vagrant

echo "Downloading VirtualBox for virtualization."
  curl -fsSL http://download.virtualbox.org/virtualbox/4.3.0/VirtualBox-4.3.0-89960-OSX.dmg > $HOME/Downloads/VirtualBox-4.3.0-89960-OSX.dmg
  open $HOME/Downloads/VirtualBox-4.3.0-89960-OSX.dmg

echo "Downloading Vagrant for virtualized dev environments."
  curl -fsSL http://files.vagrantup.com/packages/a40522f5fabccb9ddabad03d836e120ff5d14093/Vagrant-1.3.5.dmg > $HOME/Downloads/Vagrant-1.3.5.dmg
  open $HOME/Downloads/Vagrant-1.3.5.dmg

echo "Installing PHP_CodeSniffer, and setting to drupal code standards."
  pear install PHP_CodeSniffer
  curl -fsSl http://ftp.drupal.org/files/projects/coder-7.x-2.x-dev.tar.gz > /tmp/coder-7.x-2.x-dev.tar.gz
  open /tmp/coder-7.x-2.x-dev.tar.gz
  cp -R /tmp/coder/coder_sniffer/Drupal $(brew --prefix)/Cellar/php53/5.3.27/lib/php/PHP/CodeSniffer/Standards/Drupal
  phpcs --config-set default_standard Drupal

osascript -e 'tell app "System Events" to activate'
osascript -e 'tell app "System Events" to display dialog "Please install Vagrant, install VirtualBox and then restart.\n\nWelcome to Phase2!" buttons {"OK"}'
